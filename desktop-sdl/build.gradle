import com.badlogicgames.packr.Packr
import com.badlogicgames.packr.PackrConfig

apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "io.anuke.mindustry.desktopsdl.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets")

def IKVM_DIR = System.env.IKVM_HOME
//def getTarget = { return project.hasProperty("target") ? project.properties["target"] : "windows" }

def JDK_DIR = "$System.env.PACKR_DIR"
def ICON_DIR = new File("core/assets/icons/icon.icns")

task run(dependsOn: classes, type: JavaExec){
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if(System.getProperty("os.name").toLowerCase().contains("mac")){
        jvmArgs("-XstartOnFirstThread", "-Djava.awt.headless=true")
    }

    if(project.hasProperty("args")){
        args Eval.me(project.getProperties()["args"])
    }

    if(args.contains("debug")){
        main = "io.anuke.mindustry.DebugLauncher"
    }
}



["Windows", "Linux", "Mac", "All"].each{ target ->
    task "dist$target"(type: Jar, dependsOn: classes){
        from files(sourceSets.main.output.classesDirs)
        from files(sourceSets.main.output.resourcesDir)
        from {configurations.compile.collect {zipTree(it)}}
        from files(project.assetsDir)

        if(target.contains("windows")) exclude('**.so', "**.dylib")
        if(target == "mac") exclude('**.so', "**.dll")
        if(target == "linux") exclude('**.dll', "**.dylib")
        archiveName = "$appName-${target}.jar"

        manifest{
            attributes 'Main-Class': project.mainClassName
        }
    }
}

/*
task ikZip(type: Zip){
    def filename = "$appName-${getTarget()}-${version}"

    from "build/libs/$filename"
    archiveName = "${generateDeployName(getTarget())}.zip"
}

task ikdist{
    dependsOn dist
    finalizedBy ikZip

    doLast{
        def filename = "$appName-${getTarget()}-${version}"
        def folder = "build/libs/$filename"
        def baseArgs = System.properties['os.name'].toLowerCase().contains('windows') ? [] : ["mono"]
        def args = baseArgs + ["$IKVM_DIR/ikvmc.exe", "-target:winexe", "-out:build/libs/${filename}.exe", "build/libs/${filename}.jar"]
        if(file("../core/assets/sprites/icon.ico").exists()){
            args += ["-win32icon:../core/assets/sprites/icon.ico"]
        }else if(file("../core/assets/icons/icon.ico").exists()){
            args += ["-win32icon:../core/assets/icons/icon.ico"]
        }

        exec{
            commandLine args
        }

        copy{
            from file("build/libs/${filename}.exe")
            into file(folder)
        }

        copy{
            from(getTarget().contains("32") ? "$IKVM_DIR/libraries_32" : "$IKVM_DIR/libraries")
            into folder
        }
    }
}*/

PackrConfig.Platform.values().each{ platform ->
    task "packr${platform.toString()}"{
        def platformName = platform.toString().replace('64', '').replace('32', '').replace('MacOS', 'Mac')

        dependsOn "dist$platformName"

        doLast{
            copy{
                into "build/packr/"
                rename("$appName-${platformName}.jar", "desktop.jar")
                from "build/libs/$appName-${platformName}.jar"
            }

            delete{
                delete "build/packr/output/"
            }

            if(platform == PackrConfig.Platform.Windows32 || platform == PackrConfig.Platform.Windows64){
                copy{
                    into "build/packr/output"
                    from "${JDK_DIR}/templates/${platform.toString().toLowerCase()}"
                }

                copy{
                    into "build/packr/output"
                    rename("$appName-${platformName}.jar", "desktop.jar")
                    from "build/libs/$appName-${platformName}.jar"
                }
            }else{
                def config = new PackrConfig()
                config.with{
                    config.executable = appName
                    config.platform = platform
                    verbose = true
                    bundleIdentifier = getPackage() + ".mac"
                    iconResource = ICON_DIR
                    outDir = file("build/packr/output")
                    mainClass = project.ext.mainClassName
                    classpath = ["desktop-sdl/build/packr/desktop.jar"]
                    removePlatformLibs = ["desktop-sdl/build/packr/desktop.jar"]

                    vmArgs = ["Djava.net.preferIPv4Stack=true"]
                    minimizeJre = "../desktop/packr_minimize.json"
                    jdk = JDK_DIR + "jdk-${platform.toString().toLowerCase()}.zip"

                    if(platform == PackrConfig.Platform.MacOS){
                        vmArgs += "XstartOnFirstThread"
                    }
                }

                new Packr().pack(config)

                if(platform == PackrConfig.Platform.MacOS){
                    copy{
                        into "build/packr/" + appName + ".app/Contents/"
                        from "build/packr/Contents/"
                    }

                    delete{
                        delete "build/packr/Contents/"
                    }
                }
            }
        }

        task "zip${platform.toString()}"(type: Zip){
            from "build/packr/output"
            archiveName "${generateDeployName(platform.toString())}.zip"
            destinationDir(file("../deploy"))

            doLast{
                delete{
                    delete "build/packr/"
                }
            }
        }

        finalizedBy "zip${platform.toString()}"
    }
}
